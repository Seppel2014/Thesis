import site
site.addsitedir(r'C:\Users\daibe\Desktop\New folder\venv\Lib\site-packages')

import win32api
import bpy
import XInput
import math

from math import radians
from bpy.props import BoolProperty, PointerProperty
from bpy.types import Operator

#define global variables once
#main controlblock
mainControl = bpy.data.objects["HELP_Main_Movement"]
mainControl.location = (0,0,0)
main_positionOG = mainControl.matrix_local.translation
main_position = mainControl.matrix_local.translation

camera = bpy.context.scene.camera

#body
body = bpy.data.objects["HELP_Body_Control"]
body_base_position = (0,0,0)
body.matrix_local.translation = (0,0,0)
current_position = body.matrix_local.translation

#Rotation Values
body.rotation_euler[1] = 0
body.rotation_euler[0] = 0
rotationY = 0
rotationX = 0

obj = mainControl
euler = obj.rotation_euler
local_translation = (0, 0, 0)
rotated_translation = 0
accelerationX = 0
accelerationY = 0

#values for user to change
translation_max = 1 #max translation on X (standard 1)
translation_maxY = 0.8 #max translation on Y (standard 0.8)
rotation_max = 40 #maximum rotation for body (standard 40)
speedXmultiplier = 1 #multiply with Joystick Input 1 to -1 (standard 1.5)
speedZmultiplier = 0.05 #multiply with Joystick Input 1 to -1 (standard 0.1)
resistance = 0.3 #force for translating back to the origin (standard 0.3)
resistanceR = 1.3 #force for rotating back to the origin (standard 1.3)
bounce_height_multiplier = 30 #multiplier for bounces upon movement (standard 30)
bounce_frequency_multiplier = 10 #multiplier for bouncefrequency upon movement (standard 10)

#reset timeline
bpy.context.scene.frame_set(0)
bpy.ops.screen.animation_play()

class ModalTimerOperator(bpy.types.Operator):
    #Operator which runs itself from a Timer
    bl_idname = "wm.modal_timer_operator"
    bl_label = "Modal Timer Operator"
    _timer = None
    
    def modal(self, context, event):
        global body
        global body_base_position
        global current_position
        global main_position
        global main_positionOG
        global accelerationX
        global accelerationY
        global rotationY
        global rotationX
        
        ##activate controller##
        
        
        state = XInput.get_state(0)
        thumbL = XInput.get_thumb_values(state)[0][0]
        thumbR = XInput.get_thumb_values(state)[1][1]
        backBottomL = XInput.get_trigger_values(state)[0]
        backBottomR = XInput.get_trigger_values(state)[1]
        backTopL = XInput.get_button_values(state)["LEFT_SHOULDER"]*1
        backTopR = XInput.get_button_values(state)["RIGHT_SHOULDER"]*1
        dPadUp = XInput.get_button_values(state)["DPAD_UP"]*1
        dPadDown = XInput.get_button_values(state)["DPAD_DOWN"]*1
        dPadRight = XInput.get_button_values(state)["DPAD_RIGHT"]*1
        dPadLeft = XInput.get_button_values(state)["DPAD_LEFT"]*1
        X = XInput.get_button_values(state)["X"]
        Y = XInput.get_button_values(state)["Y"]
        A = XInput.get_button_values(state)["A"]
        B = XInput.get_button_values(state)["B"]
        start = XInput.get_button_values(state)["START"]
        
        
        
        #print(XInput.get_button_values(state))
        ##-------------------##
        
    #change Camera
        if(X == True):
            bpy.context.scene.camera = bpy.data.objects["cam3"]
        if(A == True):
            bpy.context.scene.camera = bpy.data.objects["cam1"]
        if(B == True):
            bpy.context.scene.camera = bpy.data.objects["cam2"]
        if(Y == True):
            bpy.context.scene.camera = bpy.data.objects["cam4"]
         
    #values for body
        speedX_previous = 0
        speedZ_previous = 0
    
        speedX = thumbR*speedXmultiplier
        speedZ = thumbL*speedZmultiplier
    
        #body Move and rotate when moving forward   
        bodyT = body.matrix_local.translation
        distanceX = checkDistanceX(bodyT,body_base_position)
        
        if(thumbR > 0.01 or thumbR < -0.01):
            if(distanceX < translation_max):
                accelerationX = (speedX-speedX_previous)*(-1)
            else:
                accelerationX = 0
        elif(thumbR < 0.01 and thumbR > -0.01):
            if(checkPositiveX(bodyT,body_base_position) == True):
                if(distanceX > resistance):
                    accelerationX = -resistance
                else:
                    accelerationX = 0
            elif(checkPositiveX(bodyT,body_base_position) == False):
                if(distanceX > resistance):
                    accelerationX = resistance
                else:
                    accelerationX = 0            
        
        #rotate body on Y
        y_degrees = math.degrees(body.rotation_euler[1])
        if(speedX > 0.02 or speedX < -0.02):
            if(y_degrees < rotation_max and y_degrees > rotation_max*(-1)):
                rotationY = (accelerationX * 5)*(-1)
            else:
                rotationY = 0
        elif(speedX < 0.01 and speedX > -0.01):
            if(y_degrees < resistanceR and y_degrees > -resistanceR):
                rotationY = 0
            
            elif(y_degrees >= 1):
                if(y_degrees > resistanceR):
                    rotationY -= resistanceR*0.5
                else:
                    rotationY = 0
            elif(y_degrees <= -1):
                if(y_degrees < resistanceR*(-1)):
                    rotationY += resistanceR*0.5
                else:
                    rotationY = 0
        
    #body Move and rotate when moving forward and rotating on Z  
        #get body and distance to OG Point
        distanceY = checkDistanceY(bodyT,body_base_position)
        #get value for acceleration
                
        if(thumbL > 0.01 or thumbL < -0.01):
            if(speedX > 0.01):
                if(distanceY < translation_maxY):
                    accelerationY = (speedZ-speedZ_previous)*5
                else:
                    accelerationY = 0
            elif(speedX < -0.01):
                if(distanceY < translation_maxY):
                    accelerationY = (speedZ-speedZ_previous)*-5
                else:
                    accelerationY = 0
       
        elif(thumbL < 0.01 and thumbL > -0.01):
            if(checkPositiveY(bodyT,body_base_position) == True):
                if(distanceY > resistance):
                    accelerationY = -resistance*0.9
                else:
                    accelerationY = 0
            elif(checkPositiveY(bodyT,body_base_position) == False):
                if(distanceY > resistance):
                    accelerationY = resistance*0.9
                else:
                    accelerationY = 0

    #rotate body on X
        x_degrees = math.degrees(body.rotation_euler[0])
        
        if(thumbL > 0.02 or thumbL < -0.02):
            if(speedX > 0.05 or speedX <-0.05):
                if(x_degrees < rotation_max and x_degrees > rotation_max*(-1)):
                    rotationX = (accelerationY * 10)*(-1)
                else:
                    rotationX = 0
            else:
                rotationX = 0
        elif(thumbL < 0.02 and thumbL > -0.02):
            if(x_degrees < resistanceR and x_degrees > -resistanceR):
                rotationX = 0
            
            elif(x_degrees >= 1):
                if(x_degrees > resistanceR):
                    rotationX = resistanceR*0.9
                else:
                    rotationX = 0
            elif(x_degrees <= -1):
                if(x_degrees < resistanceR*(-1)):
                    rotationX -= resistanceR*0.9
                else:
                    rotationX = 0
    
    #sidewheels
        rotation_angle_degrees = 0 + backTopL - backTopR
        wheelLeft = bpy.data.objects["control_position_topWheels"]
        wheelLeftT = wheelLeft.matrix_local.translation
        wheelLeft.matrix_local.translation=(wheelLeftT.x,wheelLeftT.y-accelerationX*0.2,wheelLeftT.z-backBottomL*0.1+backBottomR*0.1)
        wheelLeft.rotation_euler[0] += math.radians(rotation_angle_degrees*2)
        
    #main up and down
        emptyMain = bpy.data.objects["control_body"]
        MainT = emptyMain.matrix_local.translation
        emptyMain.matrix_local.translation=(MainT.x,MainT.y,MainT.z-dPadDown*0.5+dPadUp*0.5)
    
    #bounce on z while driving
        _timer = None
        bounce_height = 0
        bounce_frequency = 0
    
        if(speedX > 0.01):
            bounce_height = speedX/bounce_height_multiplier
            bounce_frequency = speedX*bounce_frequency_multiplier
        elif(speedX < -0.01):
            bounce_frequency = speedX*-bounce_frequency_multiplier
            bounce_height = speedX/-bounce_height_multiplier
        else:
            bounce_frequency = 0
        
        time = context.scene.frame_current / context.scene.render.fps
        bounce = math.sin(time * bounce_frequency) * bounce_height
        
    #update transformations of body            
        body.matrix_local.translation=(bodyT.x+accelerationX,bodyT.y+accelerationY,bodyT.z+bounce)
        
        body.rotation_euler[0] += math.radians(-rotationX)
        body.rotation_euler[1] += math.radians(rotationY)
    
    #shrinkwrap move
        planeRight = bpy.data.objects["plane_groundDeform_right"]
        planeLeft = bpy.data.objects["plane_groundDeform_left"]
        
        movePlaneRight = (0 - dPadRight + dPadLeft)*0.1
        movePlaneLeft = (0 + dPadRight - dPadLeft)*0.1
        
        planeRight.location.x += movePlaneRight
        planeLeft.location.x += movePlaneLeft
      
    #main
        #move main on local x axis
        local_translation = (speedX,0,0)
        rotated_translation = rotate_vector(local_translation, euler.x, euler.y, euler.z)
        obj.location.x += rotated_translation[0]
        obj.location.y += rotated_translation[1]
        obj.location.z += rotated_translation[2]
        bpy.data.objects["help_Sphere_left"].rotation_euler[0] -= speedX*0.1
        
        #rotate on global z axis
        bpy.data.objects["HELP_Main_Movement"].rotation_euler[2] -= speedZ
        bpy.data.objects["help_Sphere_left"].rotation_euler[0] -= thumbL*0.1
        
        speedX_previous = speedX
        speedZ_previous = speedZ
        
    #reset    
        bodyR = bpy.data.objects["HELP_Body_Control"]
        mainR = bpy.data.objects["control_body"]
        
        if(start == True):
            bodyR.matrix_local.translation=(0,0,0)
            bodyR.rotation_euler[0] = math.radians(0)
            bodyR.rotation_euler[1] = math.radians(0)
            mainR.matrix_local.translation=(0,0,15)
            planeRight.location.x = -5
            planeLeft.location.x = 5
            bpy.data.objects["help_Sphere_left"].rotation_euler[0] = 0
            
        if event.type in {'RIGHTMOUSE', 'ESC'}:
            #mainControl.matrix_local.translation = main_positionOG
            wheelLeft.matrix_local.translation=(0,wheelLeft.matrix_local.translation.y,wheelLeft.matrix_local.translation.z)
            self.cancel(context)
            bpy.ops.screen.animation_cancel()
            return {'CANCELLED'}
        
        return{'PASS_THROUGH'}
    
    def execute(self,context):
        wm = context.window_manager
        self._timer = wm.event_timer_add(0.1, window=context.window)
        wm.modal_handler_add(self)
        return {'RUNNING_MODAL'}
    
    def cancel(self, context):
        wm = context.window_manager
        wm.event_timer_remove(self._timer)
        
def menu_func(self, context):
    self.layout.operator(ModalTimerOperaator.bl_idname, text=ModalTimerOperator.bl_label)
    
def register():
    bpy.utils.register_class(ModalTimerOperator)
    bpy.types.VIEW3D_MT_view.append(menu_func)
    
def unregister():
    bpy.utils.unregister_class(ModalTimerOperator)
    bpy.types.VIEW3D_MT_view.remove(menu_func)
    
def checkPositiveX(v1, v2):
    conX = v2[0] - v1[0]
    if(conX <= 0):
        return(True)
    else:
        return(False) 
    
def checkPositiveY(v1, v2):
    conY = v2[1] - v1[1]
    if(conY <= 0):
        return(True)
    else:
        return(False)     
    
def checkDistanceX(dist1, dist2):
    conX = dist1[0] - dist2[0]
    conY = 0
    conZ = 0
    dist = float(round(math.sqrt(conX**2+conY**2+conZ**2),3))
    return(dist)

def checkDistanceY(dist1, dist2):
    conX = 0
    conY = dist1[1] - dist2[1]
    conZ = 0
    dist = float(round(math.sqrt(conX**2+conY**2+conZ**2),3))
    return(dist)

def rotate_vector(v, roll, pitch, yaw):
    """Rotate vector `v` by Euler angles (roll, pitch, yaw)"""
    # Calculate cosines and sines
    cr = math.cos(roll)
    sr = math.sin(roll)
    cp = math.cos(pitch)
    sp = math.sin(pitch)
    cy = math.cos(yaw)
    sy = math.sin(yaw)

    # Rotation matrices around x, y, and z axes
    rx = [1, 0, 0], [0, cr, -sr], [0, sr, cr]
    ry = [cp, 0, sp], [0, 1, 0], [-sp, 0, cp]
    rz = [cy, -sy, 0], [sy, cy, 0], [0, 0, 1]

    # Combined rotation matrix: Rz * Ry * Rx
    r = [[sum(a*b for a, b in zip(R_row, C_col)) for C_col in zip(*rx)] for R_row in rz]
    r = [[sum(a*b for a, b in zip(R_row, C_col)) for C_col in zip(*ry)] for R_row in r]

    # Rotate vector
    return [sum(a*b for a, b in zip(R_row, v)) for R_row in r]
    
if __name__ == "__main__":
    register()
    bpy.ops.wm.modal_timer_operator()